import json
import os
import re
import subprocess
import sys
from openai import OpenAI
from cvss import CVSS4


if len(sys.argv) < 2:
    print("Usage: python3 llm-openai4.0.py <path_to_json_file>")
    sys.exit(1)

# Chemin du fichier json de la CVE à analyser
file_path = sys.argv[1]

# Configuration de la clé API d'OpenAI via variable d'environnement
api_key = os.getenv("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

def extract_cvss_vector(recommendation):
    # Regex pour capturer le vecteur CVSS en s'arrêtant au premier point, espace ou retour à la ligne.
    pattern = r"(CVSS:4\.0/)[A-Z][^.\s]*(?=[.\s])"
    match = re.search(pattern, recommendation)
    if match:
        return match.group(0)
    else:
        return None

# Calcul du score CVSS à partir d'un vecteur CVSS donné.
def calcul_cvss(vector, has_exploit):
    """
    Calcule le score base CVSS pour un vecteur donné.

    Parameters:
    vector (str): Vecteur CVSS4.0 sous forme de chaîne de caractères.

    Prints:
    Affiche le score CVSS ou un message d'erreur si le calcul échoue.
    """
    if has_exploit:
        vector += "/E:P"
    else:
        vector += "/E:X"
    print("---------")
    print("Vecteur utilisé après analyse : ", vector)
    try:
        v = CVSS4(vector)
        print("Score final CVSS:", v.base_score)
    except Exception as e:
        print("Erreur lors du calcul du score CVSS:", e)


def check_exploit(cve_id):
    """
    Exécute un subprocess pour vérifier si une CVE possède un exploit connu dans la base de données Exploit-DB avec searchsploit.

    Parameters:
    cve_id (str): Identifiant CVE sous forme de chaîne de caractères

    Prints:
    Affiche le résultat de searchsploit ou un message d'erreur si l'exécution de la commande searchsploit échoue.
    """
    try:
        command = ['searchsploit', '--cve', cve_id]
        result = subprocess.run(command, capture_output=True, text=True)
        print("---------")
        print("Recherche d'exploit sur Exploit-DB:\n")

        if "Exploits: No Results" in result.stdout:
            print("Aucun exploit trouvé pour " + cve_id)
            return False
        else:
            print("Exploits trouvés pour " + cve_id + ":\n" + result.stdout)
            return True
    except subprocess.CalledProcessError as e:
        return "Une erreur s'est produite lors de la recherche d'exploits: " + str(e)
    
# Analyse de la CVE en utilisant chat.completions d'OpenAI
def analyser_cve(description, cvss_score):
    """
    Demande à l'API OpenAI d'analyser une description de CVE et de proposer un vecteur CVSS ajusté.

    Utilise le modèle GPT-4 pour générer une recommandation basée sur la description et le score CVSS
    actuel fournis. La recommandation inclut un vecteur CVSS ajusté et une justification
    de cet ajustement. La réponse est structurée pour une concision maximale.
    Le modèle est configuré avec une température de 0.00, ce qui le rend très déterministe
    et minimise la variabilité dans les réponses, maximisant ainsi la précision et la cohérence des recommandations
    générées.

    Parameters:
    description (str): La description de la vulnérabilité à analyser.
    cvss_score (float): Le score CVSS actuel de la vulnérabilité.

    Returns:
    str: La recommandation générée par l'API OpenAI. Retourne une chaîne de caractères avec la
         recommandation complète ou un message indiquant qu'aucune recommandation n'a été trouvée.

    Raises:
    openai.Error: Si une erreur se produit lors de la communication avec l'API OpenAI.
    """
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": """Rôle : Tu es un expert spécialisé dans l'analyse objective des vulnérabilités en informatique. 
Evalues la description suivante et le score CVSS qui est exprimé au format CVSS3.1. 
Convertis ces métriques au format CVSS4.0 et modifie les valeurs des métriques si nécessaire en justifiant ta réponse pour chaque métrique.
Voici les valeurs possibles pour chaque métrique en CVSS4.0 : 
Attack Vector (AV) : Network (N)/Adjacent (A)/Local (L)/Physical (P), 
Attack Complexity (AC) : Low (L)/High(H), 
Attack Requirements (AT) : None (N)/Present (P), 
Privileges Required (PR) : None(N)/Low(L)/High(H), 
User Interaction (UI): None(N)/Passive(P)/Active(A),
Vulnerable System Confidentiality (VC):Low(L)/High(H)/None(N),
Vulnerable System Integrity (VI):Low(L)/High(H)/None(N), 
Vulnerable System Availability (VA):Low(L)/High(H)/None(N), 
Subsystem Confidentiality (SC):Low(L)/High(H)/Not Defined(N), 
Subsystem Integrity (SI):Low(L)/High(H)/Not Defined(N),
Subsystem Availability (SA):Low(L)/High(H)/Not Defined(N)
Voici un exemple de format de vecteur CVSS4.0 : CVSS:4.0/AV:N/AC:L/AT:N/PR:L/UI:N/VC:H/VI:H/VA:H/SC:N/SI:N/SA:N
narrow: soit concis dans ta réponse."""},
            {"role": "user", "content": f"Description: {description}\nScore CVSS actuel: {cvss_score}"}
        ],
        max_tokens=5000,
        temperature=0.00
    )
    if response.choices and response.choices[0].message:
        return response.choices[0].message.content.strip()
    else:
        return "Aucune recommandation trouvée."
    
try:
    # Lecture du fichier JSON de la CVE
    with open(file_path, 'r') as file:
        cve_data = json.load(file)
        description = cve_data["descriptions"][0]["value"]
        cve_id = cve_data["id"]
        cvss_score = cve_data["metrics"]["cvssMetricV31"][0]["cvssData"]["baseScore"]
        
        # Analyse de la description et du score CVSS par OpenAI (modèle GPT-4)
        recommandation = analyser_cve(description, cvss_score)
        print(f"CVE: {cve_id}, Score CVSS Actuel: {cvss_score}\nRecommandation:\n{recommandation}")

        # Recherche d'exploit sur Exploit-DB
        has_exploit = check_exploit(cve_id)

        # Extraction du vecteur puis calcul de la CVSS
        vector = extract_cvss_vector(recommandation)
        if vector:
            calcul_cvss(vector, has_exploit)
        else:
            print("Aucun vecteur CVSS trouvé.")
                
except FileNotFoundError:
    print(f"Erreur: Le fichier '{file_path}' n'a pas été trouvé.")
except json.JSONDecodeError:
    print("Erreur: Le fichier n'est pas un JSON valide.")