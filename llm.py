import os
import subprocess
from enum import Enum

from llm_llama2 import *
from llm_mistral import *
from bulker import *

class llms(Enum):
    LLAMATWO = 1
    MISTRALCODEALPACA = 2
    MISTRALINSTRUCT = 3
    OPENAITHREE = 4
    OPENAIFOUR = 5
    
def llm(llm, cve_path, cve_year, cve_id):
    # Lauch the selected llm with the chosen cve

    if llm == llms.LLAMATWO:
        create_cvss_llama2(cve_path, cve_year, cve_id)
    elif llm == llms.MISTRALCODEALPACA:
        create_cvss_mistral(False, cve_path, cve_year, cve_id)
    elif llm == llms.MISTRALINSTRUCT:
        create_cvss_mistral(True, cve_path, cve_year, cve_id)
    elif llm == llms.OPENAITHREE:
        command = ['python3', 'llm-openai3-1.py', get_cve_path(cve_path, cve_year, cve_id)]
        result = subprocess.run(command, capture_output=True, text=True)
        if result.stdout:
            print("Résultat du modèle OpenAI CVSS 3.1:\n", result.stdout)
        if result.stderr:
            print("Erreur du modèle OpenAI CVSS 3.1:\n", result.stderr)

    elif llm == llms.OPENAIFOUR:
        command = ['python3', 'llm-openai4-0.py', get_cve_path(cve_path, cve_year, cve_id)]
        result = subprocess.run(command, capture_output=True, text=True)
        if result.stdout:
            print("Résultat du modèle OpenAI CVSS 4.0:\n", result.stdout)
        if result.stderr:
            print("Erreur du modèle OpenAI CVSS 4.0:\n", result.stderr)

def main():

    current_path = os.path.dirname(os.getcwd())
    #cve_path = f"{current_path}/cvelistV5/cves"
    cve_path = f"{current_path}/cve-nist"


    #llm(llms.LLAMATWO, cve_path, '2023', '0001')
    #llm(llms.MISTRALCODEALPACA, cve_path, '2023', '0001')
    #llm(llms.MISTRALINSTRUCT, cve_path, '2023', '0001')
    #llm(llms.OPENAITHREE, cve_path, '2023', '0001')
    llm(llms.OPENAIFOUR, cve_path, '2023', '0001')

if __name__ == "__main__":
    main()