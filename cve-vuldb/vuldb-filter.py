import json
import os
import requests
import sys


def process_cve(item, directory_year, directory_thousand, cve_id):
    cve_details = json.dumps(item, indent=4)

    if not os.path.exists(directory_year):
        os.makedirs(directory_year)

    if not os.path.exists(directory_thousand):
        os.makedirs(directory_thousand)

    file_path = os.path.join(directory_thousand, f'{cve_id}.json')
    with open(file_path, 'w') as file:
        file.write(cve_details)


def fetch_cve_data(cve_id, api_key):
    url = "https://vuldb.com/?api"
    data = {"apikey": api_key, "search": cve_id, "details": 1}
    response = requests.post(url, data=data)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Erreur lors de la récupération des données pour {cve_id}")
        sys.exit(1)


if len(sys.argv) < 2:
    print("Usage: python3 vuldb-filter.py <CVE-ID> <api-key>")
    sys.exit(1)

cve_id = sys.argv[1]
api_key = sys.argv[2]

# Récupération des données CVE
cve_data = fetch_cve_data(cve_id, api_key)

# Traitement et sauvegarde des données
cve_year = cve_id.split('-')[1]
cve_number = int(cve_id.split('-')[2])
cve_thousand = cve_number // 1000

directory_year = f'../../cve-vuldb/{cve_year}'
directory_thousand = f'{directory_year}/{cve_thousand}xxx'

process_cve(cve_data, directory_year, directory_thousand, cve_id)

print(f"Fichier créé avec succès pour le CVE {cve_id}.")
