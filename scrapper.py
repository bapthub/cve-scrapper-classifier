import os
# import time
# import requests
# import zipfile
import pandas as pd
from sqlalchemy import create_engine
from dotenv import load_dotenv
# from sqlalchemy.engine.base import Engine

load_dotenv()
port = os.getenv("POSTGRES_PORT")
base_pg = os.getenv("POSTGRES_DB")
host = os.getenv("POSTGRES_HOST")
user = os.getenv("POSTGRES_USER")
password = os.getenv("POSTGRES_PASSWORD")

# timestr = time.strftime("%Hh%M-%d/%m/%Y")
# pd.set_option('display.max_columns', 500)

def get_df(cve_path:str) -> pd.DataFrame:
    df = None
    """create dataframe from file"""
    for folder in os.listdir(cve_path):
        folder_path = os.path.join(cve_path, folder)
        if os.path.isdir(folder_path):
            for cvefile in os.listdir(folder_path):
                df = pd.read_json(os.path.join(folder_path, cvefile))

    df = pd.read_json(f"{cve_path}/")
    # df["bulk_date"] = timestr
    #return df

def main():
    current_path = os.path.dirname(os.getcwd())

    cve_path = f"{current_path}/cvelistV5/cves/2024"
    print(cve_path)
    get_df(cve_path)
    
    # df = pd.read_json(os.path.join(f"{cut}"))
    # if not os.path.exists(current_path):
    #     os.makedirs(current_path)
    # cve_path = ""
    #  = (current_path)
    # if .get_data():
    #     print("Dowload successed")
    # else:
    #     print("Dowload failed")
    # df = .get_df()
    engine = create_engine(f"postgresql://{user}:{password}@{host}:{port}/{base_pg}")
    # print("upload succesfull :",df.to_sql("",engine,if_exists="fail",index=False,schema="odata") > 0)

if __name__ == "__main__":
    main()